12,17c12,13
< #if __GNUC_PREREQ(4,1)
< # pragma GCC visibility push(hidden)
< #endif
< 
< /* order matters: used as index into "install_dir[]" in appletlib.c */
< typedef enum bb_install_loc_t {
---
> /* order matters: used as index into "install_dir[]" in busybox.c */
> enum Location {
23c19
< } bb_install_loc_t;
---
> };
25c21
< typedef enum bb_suid_t {
---
> enum SUIDRoot {
29,37c25
< } bb_suid_t;
< 
< 
< /* Defined in appletlib.c (by including generated applet_tables.h) */
< /* Keep in sync with applets/applet_tables.c! */
< extern const char applet_names[];
< extern int (*const applet_main[])(int argc, char **argv);
< extern const uint16_t applet_nameofs[];
< extern const uint8_t applet_install_loc[];
---
> };
39,40c27,57
< #if ENABLE_FEATURE_SUID || ENABLE_FEATURE_PREFER_APPLETS
< #define APPLET_NAME(i) (applet_names + (applet_nameofs[i] & 0x0fff))
---
> struct BB_applet {
> 	const char *name;
> 	int (*main) (int argc, char **argv);
> 	__extension__ enum Location location:4;
> 	__extension__ enum SUIDRoot need_suid:4;
> };
> 
> /* From busybox.c and applet.c */
> extern int busybox_main(int argc, char **argv);
> extern const struct BB_applet applets[];
> extern const unsigned short NUM_APPLETS;
> 
> /* Automagically pull in all the applet function prototypes and
>  * applet usage strings.  These are all of the form:
>  *		extern int foo_main(int argc, char **argv);
>  *		extern const char foo_usage[];
>  * These are all autogenerated from the set of currently defined applets.
>  */
> #define PROTOTYPES
> #include "applets.h"
> #undef PROTOTYPES
> 
> #ifdef BB_FEATURE_BUFFERS_GO_ON_STACK
> #define RESERVE_BB_BUFFER(buffer,len)           char buffer[len]
> #define RESERVE_BB_UBUFFER(buffer,len) unsigned char buffer[len]
> #define RELEASE_BB_BUFFER(buffer)      ((void)0)
> #else
> #ifdef BB_FEATURE_BUFFERS_GO_IN_BSS
> #define RESERVE_BB_BUFFER(buffer,len)  static          char buffer[len]
> #define RESERVE_BB_UBUFFER(buffer,len) static unsigned char buffer[len]
> #define RELEASE_BB_BUFFER(buffer)      ((void)0)
42c59,61
< #define APPLET_NAME(i) (applet_names + applet_nameofs[i])
---
> #define RESERVE_BB_BUFFER(buffer,len)           char *buffer=xmalloc(len)
> #define RESERVE_BB_UBUFFER(buffer,len) unsigned char *buffer=xmalloc(len)
> #define RELEASE_BB_BUFFER(buffer)      free (buffer)
44,47d62
< 
< #if ENABLE_FEATURE_PREFER_APPLETS
< #define APPLET_IS_NOFORK(i) (applet_nameofs[i] & (1 << 12))
< #define APPLET_IS_NOEXEC(i) (applet_nameofs[i] & (1 << 13))
50,52d64
< #if ENABLE_FEATURE_SUID
< #define APPLET_SUID(i) ((applet_nameofs[i] >> 14) & 0x3)
< #endif
54,59c66,72
< #if ENABLE_FEATURE_INSTALLER
< #define APPLET_INSTALL_LOC(i) ({ \
< 	unsigned v = (i); \
< 	if (v & 1) v = applet_install_loc[v/2] >> 4; \
< 	else v = applet_install_loc[v/2] & 0xf; \
< 	v; })
---
> /* Bit map related macros -- libc5 doens't provide these... sigh.  */
> #ifndef setbit
> #define NBBY            CHAR_BIT
> #define setbit(a,i)     ((a)[(i)/NBBY] |= 1<<((i)%NBBY))
> #define clrbit(a,i)     ((a)[(i)/NBBY] &= ~(1<<((i)%NBBY)))
> #define isset(a,i)      ((a)[(i)/NBBY] & (1<<((i)%NBBY)))
> #define isclr(a,i)      (((a)[(i)/NBBY] & (1<<((i)%NBBY))) == 0)
62,71c75,77
< 
< /* Length of these names has effect on size of libbusybox
<  * and "individual" binaries. Keep them short.
<  */
< #if ENABLE_BUILD_LIBBUSYBOX
< #if ENABLE_FEATURE_SHARED_BUSYBOX
< int lbb_main(char **argv) EXTERNALLY_VISIBLE;
< #else
< int lbb_main(char **argv);
< #endif
---
> #ifndef RB_POWER_OFF
> /* Stop system and switch power off if possible.  */
> #define RB_POWER_OFF   0x4321fedc
74,76c80,81
< #if __GNUC_PREREQ(4,1)
< # pragma GCC visibility pop
< #endif
---
> /* Pull in the utility routines from libbb */
> #include "libbb.h"
78c83
< #endif	/* _BB_INTERNAL_H_ */
---
> #endif							/* _BB_INTERNAL_H_ */
